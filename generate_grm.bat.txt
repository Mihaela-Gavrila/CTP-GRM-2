@echo off
echo ========================================
echo    GRM 2.0 - GENERATOR AUTOMAT
echo ========================================
echo.
echo Generez toate fisierele pentru sistemul GRM 2.0...
echo.

REM Creez structura de foldere
echo Creez structura de foldere...
mkdir backend 2>nul
mkdir backend\src 2>nul
mkdir backend\src\main 2>nul
mkdir backend\src\main\java 2>nul
mkdir backend\src\main\java\ro 2>nul
mkdir backend\src\main\java\ro\ctp 2>nul
mkdir backend\src\main\java\ro\ctp\grm 2>nul
mkdir backend\src\main\java\ro\ctp\grm\entity 2>nul
mkdir backend\src\main\java\ro\ctp\grm\repository 2>nul
mkdir backend\src\main\java\ro\ctp\grm\service 2>nul
mkdir backend\src\main\java\ro\ctp\grm\controller 2>nul
mkdir backend\src\main\java\ro\ctp\grm\config 2>nul
mkdir backend\src\main\java\ro\ctp\grm\security 2>nul
mkdir backend\src\main\java\ro\ctp\grm\dto 2>nul
mkdir backend\src\main\java\ro\ctp\grm\dto\request 2>nul
mkdir backend\src\main\java\ro\ctp\grm\dto\response 2>nul
mkdir backend\src\main\java\ro\ctp\grm\exception 2>nul
mkdir backend\src\main\resources 2>nul
mkdir backend\src\main\resources\db 2>nul
mkdir backend\src\main\resources\db\migration 2>nul
mkdir frontend 2>nul
mkdir frontend\src 2>nul
mkdir frontend\src\components 2>nul
mkdir frontend\src\pages 2>nul
mkdir frontend\src\pages\admin 2>nul
mkdir frontend\src\pages\schedules 2>nul
mkdir frontend\src\pages\projects 2>nul
mkdir frontend\src\pages\documents 2>nul
mkdir frontend\src\pages\fleet 2>nul
mkdir frontend\src\pages\reports 2>nul
mkdir frontend\src\services 2>nul
mkdir frontend\src\store 2>nul
mkdir frontend\src\store\slices 2>nul
mkdir frontend\src\theme 2>nul
mkdir frontend\src\types 2>nul
mkdir frontend\public 2>nul
mkdir docker 2>nul
mkdir docker\nginx 2>nul
mkdir scripts 2>nul
mkdir .github 2>nul
mkdir .github\workflows 2>nul

echo ✓ Structura de foldere creata!

REM Creez README.md
echo Creez README.md...
(
echo # GRM 2.0 - Sistem ERP pentru Instituții
echo.
echo [![Build Status](https://github.com/Mihaela-Gavrila/CTP-GRM-2/workflows/CI/badge.svg)](https://github.com/Mihaela-Gavrila/CTP-GRM-2/actions^)
echo [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT^)
echo.
echo Sistem informatic integrat pentru gestionarea resurselor umane, proiectelor și documentelor într-o instituție.
echo.
echo ## 🚀 Caracteristici Principale
echo.
echo ### 📊 Module Implementate
echo - **Autentificare ^& Securitate** - JWT, RBAC, audit logging
echo - **Gestionarea Utilizatorilor** - Roluri, permisiuni, departamente
echo - **Management Programe** - FullCalendar, turi de lucru, planificare
echo - **Management Proiecte** - Gantt charts, taskuri, milestone-uri
echo - **Management Documente** - Workflow, aprobare, arhivare
echo - **Management Flotă** - Vehicule, mentenanță, rezervări
echo - **Raportare** - JasperReports, export Excel/PDF
echo.
echo ### 🛠️ Stack Tehnologic
echo.
echo **Backend:**
echo - Java 17 + Spring Boot 3.2
echo - Spring Security + JWT
echo - PostgreSQL 15
echo - JasperReports
echo - Maven
echo.
echo **Frontend:**
echo - React 18 + TypeScript
echo - Material-UI (MUI^)
echo - Redux Toolkit
echo - FullCalendar
echo - Chart.js/Recharts
echo.
echo **DevOps:**
echo - Docker + Docker Compose
echo - GitHub Actions CI/CD
echo - Nginx
echo - PostgreSQL
echo.
echo ## 🚀 Instalare și Rulare
echo.
echo ### Prerequizite
echo - Docker ^& Docker Compose
echo - Git
echo - JDK 17+ (pentru development^)
echo - Node.js 18+ (pentru development^)
echo.
echo ### Instalare Rapidă
echo.
echo ```bash
echo # Clonează repository-ul
echo git clone https://github.com/Mihaela-Gavrila/CTP-GRM-2.git
echo cd CTP-GRM-2
echo.
echo # Copiază fișierul de configurare
echo cp .env.example .env
echo.
echo # Start aplicația (toate serviciile^)
echo docker-compose up -d
echo ```
echo.
echo ### Accesare
echo - **Frontend:** http://localhost:3000
echo - **Backend API:** http://localhost:8080/api
echo - **Swagger UI:** http://localhost:8080/swagger-ui.html
echo - **Database:** localhost:5432
echo.
echo ### Credențiale Default
echo - **Username:** admin
echo - **Password:** Admin123!
echo.
echo ## 📞 Support
echo.
echo ### Contact
echo - **Email:** mihaela.gavrila@student.tuiasi.ro
echo - **Institution:** Gheorghe Asachi Technical University Iași
echo - **GitHub:** https://github.com/Mihaela-Gavrila
echo.
echo ## 📄 License
echo.
echo Acest proiect este licențiat sub MIT License.
echo.
echo ---
echo.
echo **Gheorghe Asachi Technical University Iași** ^| **Faculty of Automation and Computer Engineering** ^| **2025**
) > README.md

echo ✓ README.md creat!

REM Creez .gitignore
echo Creez .gitignore...
(
echo # Compiled class file
echo *.class
echo.
echo # Log file
echo *.log
echo.
echo # Package Files #
echo *.jar
echo *.war
echo *.nar
echo *.ear
echo *.zip
echo *.tar.gz
echo *.rar
echo.
echo # Maven
echo target/
echo pom.xml.tag
echo pom.xml.releaseBackup
echo pom.xml.versionsBackup
echo.
echo # Node.js
echo node_modules/
echo npm-debug.log*
echo yarn-debug.log*
echo yarn-error.log*
echo.
echo # Environment files
echo .env
echo .env.local
echo .env.development.local
echo .env.test.local
echo .env.production.local
echo.
echo # IDEs
echo .idea/
echo *.swp
echo *.swo
echo.
echo # OS
echo .DS_Store
echo Thumbs.db
echo.
echo # Application specific
echo uploads/
echo logs/
echo temp/
) > .gitignore

echo ✓ .gitignore creat!

REM Creez .env.example
echo Creez .env.example...
(
echo # Database Configuration
echo DB_HOST=localhost
echo DB_PORT=5432
echo DB_NAME=grm_db
echo DB_USERNAME=grm_user
echo DB_PASSWORD=grm_password
echo.
echo # JWT Configuration
echo JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
echo JWT_EXPIRATION=86400
echo.
echo # Application Configuration
echo APP_ENV=development
echo APP_PORT=8080
echo FRONTEND_URL=http://localhost:3000
echo.
echo # File Upload Configuration
echo MAX_FILE_SIZE=10MB
echo UPLOAD_DIR=./uploads
echo.
echo # Logging Configuration
echo LOG_LEVEL=INFO
) > .env.example

echo ✓ .env.example creat!

REM Creez docker-compose.yml
echo Creez docker-compose.yml...
(
echo version: '3.8'
echo.
echo services:
echo   # PostgreSQL Database
echo   postgres:
echo     image: postgres:15-alpine
echo     container_name: grm-postgres
echo     environment:
echo       POSTGRES_DB: grm_db
echo       POSTGRES_USER: grm_user
echo       POSTGRES_PASSWORD: grm_password
echo     ports:
echo       - "5432:5432"
echo     volumes:
echo       - postgres_data:/var/lib/postgresql/data
echo       - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
echo     healthcheck:
echo       test: ["CMD-SHELL", "pg_isready -U grm_user -d grm_db"]
echo       interval: 30s
echo       timeout: 10s
echo       retries: 3
echo     networks:
echo       - grm-network
echo.
echo   # Backend Spring Boot
echo   backend:
echo     build:
echo       context: ./backend
echo       dockerfile: Dockerfile
echo     container_name: grm-backend
echo     environment:
echo       - SPRING_PROFILES_ACTIVE=docker
echo       - DB_HOST=postgres
echo       - DB_PORT=5432
echo       - DB_NAME=grm_db
echo       - DB_USERNAME=grm_user
echo       - DB_PASSWORD=grm_password
echo       - JWT_SECRET=grm-super-secret-jwt-key-2025
echo       - JWT_EXPIRATION=86400
echo     ports:
echo       - "8080:8080"
echo     depends_on:
echo       postgres:
echo         condition: service_healthy
echo     volumes:
echo       - ./uploads:/app/uploads
echo       - ./logs:/app/logs
echo     networks:
echo       - grm-network
echo.
echo   # Frontend React
echo   frontend:
echo     build:
echo       context: ./frontend
echo       dockerfile: Dockerfile
echo       args:
echo         - REACT_APP_API_URL=http://localhost:8080/api
echo     container_name: grm-frontend
echo     ports:
echo       - "3000:80"
echo     depends_on:
echo       - backend
echo     networks:
echo       - grm-network
echo.
echo volumes:
echo   postgres_data:
echo     driver: local
echo.
echo networks:
echo   grm-network:
echo     driver: bridge
) > docker-compose.yml

echo ✓ docker-compose.yml creat!

REM Creez docker-compose.dev.yml pentru development
echo Creez docker-compose.dev.yml...
(
echo version: '3.8'
echo.
echo services:
echo   # PostgreSQL Database pentru development
echo   postgres:
echo     image: postgres:15-alpine
echo     container_name: grm-postgres-dev
echo     environment:
echo       POSTGRES_DB: grm_db
echo       POSTGRES_USER: grm_user
echo       POSTGRES_PASSWORD: grm_password
echo     ports:
echo       - "5432:5432"
echo     volumes:
echo       - postgres_data_dev:/var/lib/postgresql/data
echo       - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
echo     networks:
echo       - grm-network
echo.
echo   # Pentru development, backend și frontend le rulezi manual:
echo   # Backend: cd backend ^&^& ./mvnw spring-boot:run
echo   # Frontend: cd frontend ^&^& npm start
echo.
echo volumes:
echo   postgres_data_dev:
echo     driver: local
echo.
echo networks:
echo   grm-network:
echo     driver: bridge
) > docker-compose.dev.yml

echo ✓ docker-compose.dev.yml creat!

REM Creez LICENSE
echo Creez LICENSE...
(
echo MIT License
echo.
echo Copyright (c^) 2025 Mihaela Gavrila
echo.
echo Permission is hereby granted, free of charge, to any person obtaining a copy
echo of this software and associated documentation files (the "Software"^), to deal
echo in the Software without restriction, including without limitation the rights
echo to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
echo copies of the Software, and to permit persons to whom the Software is
echo furnished to do so, subject to the following conditions:
echo.
echo The above copyright notice and this permission notice shall be included in all
echo copies or substantial portions of the Software.
echo.
echo THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
echo IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
echo FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
echo AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
echo LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
echo OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
echo SOFTWARE.
) > LICENSE

echo ✓ LICENSE creat!

REM Creez backend/pom.xml
echo Creez backend/pom.xml...
(
echo ^<?xml version="1.0" encoding="UTF-8"?^>
echo ^<project xmlns="http://maven.apache.org/POM/4.0.0"
echo          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
echo          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
echo          http://maven.apache.org/xsd/maven-4.0.0.xsd"^>
echo     ^<modelVersion^>4.0.0^</modelVersion^>
echo.
echo     ^<parent^>
echo         ^<groupId^>org.springframework.boot^</groupId^>
echo         ^<artifactId^>spring-boot-starter-parent^</artifactId^>
echo         ^<version^>3.2.1^</version^>
echo         ^<relativePath/^>
echo     ^</parent^>
echo.
echo     ^<groupId^>ro.ctp^</groupId^>
echo     ^<artifactId^>grm-backend^</artifactId^>
echo     ^<version^>1.0.0^</version^>
echo     ^<name^>GRM Backend^</name^>
echo     ^<description^>Backend pentru sistemul GRM 2.0^</description^>
echo.
echo     ^<properties^>
echo         ^<java.version^>17^</java.version^>
echo     ^</properties^>
echo.
echo     ^<dependencies^>
echo         ^<dependency^>
echo             ^<groupId^>org.springframework.boot^</groupId^>
echo             ^<artifactId^>spring-boot-starter-web^</artifactId^>
echo         ^</dependency^>
echo         ^<dependency^>
echo             ^<groupId^>org.springframework.boot^</groupId^>
echo             ^<artifactId^>spring-boot-starter-data-jpa^</artifactId^>
echo         ^</dependency^>
echo         ^<dependency^>
echo             ^<groupId^>org.springframework.boot^</groupId^>
echo             ^<artifactId^>spring-boot-starter-security^</artifactId^>
echo         ^</dependency^>
echo         ^<dependency^>
echo             ^<groupId^>org.springframework.boot^</groupId^>
echo             ^<artifactId^>spring-boot-starter-validation^</artifactId^>
echo         ^</dependency^>
echo         ^<dependency^>
echo             ^<groupId^>org.springframework.boot^</groupId^>
echo             ^<artifactId^>spring-boot-starter-actuator^</artifactId^>
echo         ^</dependency^>
echo         ^<dependency^>
echo             ^<groupId^>org.postgresql^</groupId^>
echo             ^<artifactId^>postgresql^</artifactId^>
echo             ^<scope^>runtime^</scope^>
echo         ^</dependency^>
echo         ^<dependency^>
echo             ^<groupId^>org.flywaydb^</groupId^>
echo             ^<artifactId^>flyway-core^</artifactId^>
echo         ^</dependency^>
echo         ^<dependency^>
echo             ^<groupId^>io.jsonwebtoken^</groupId^>
echo             ^<artifactId^>jjwt-api^</artifactId^>
echo             ^<version^>0.11.5^</version^>
echo         ^</dependency^>
echo         ^<dependency^>
echo             ^<groupId^>io.jsonwebtoken^</groupId^>
echo             ^<artifactId^>jjwt-impl^</artifactId^>
echo             ^<version^>0.11.5^</version^>
echo             ^<scope^>runtime^</scope^>
echo         ^</dependency^>
echo         ^<dependency^>
echo             ^<groupId^>io.jsonwebtoken^</groupId^>
echo             ^<artifactId^>jjwt-jackson^</artifactId^>
echo             ^<version^>0.11.5^</version^>
echo             ^<scope^>runtime^</scope^>
echo         ^</dependency^>
echo         ^<dependency^>
echo             ^<groupId^>org.projectlombok^</groupId^>
echo             ^<artifactId^>lombok^</artifactId^>
echo             ^<optional^>true^</optional^>
echo         ^</dependency^>
echo         ^<dependency^>
echo             ^<groupId^>org.springdoc^</groupId^>
echo             ^<artifactId^>springdoc-openapi-starter-webmvc-ui^</artifactId^>
echo             ^<version^>2.2.0^</version^>
echo         ^</dependency^>
echo         ^<dependency^>
echo             ^<groupId^>org.springframework.boot^</groupId^>
echo             ^<artifactId^>spring-boot-starter-test^</artifactId^>
echo             ^<scope^>test^</scope^>
echo         ^</dependency^>
echo     ^</dependencies^>
echo.
echo     ^<build^>
echo         ^<plugins^>
echo             ^<plugin^>
echo                 ^<groupId^>org.springframework.boot^</groupId^>
echo                 ^<artifactId^>spring-boot-maven-plugin^</artifactId^>
echo                 ^<configuration^>
echo                     ^<excludes^>
echo                         ^<exclude^>
echo                             ^<groupId^>org.projectlombok^</groupId^>
echo                             ^<artifactId^>lombok^</artifactId^>
echo                         ^</exclude^>
echo                     ^</excludes^>
echo                 ^</configuration^>
echo             ^</plugin^>
echo         ^</plugins^>
echo     ^</build^>
echo ^</project^>
) > backend\pom.xml

echo ✓ backend/pom.xml creat!

REM Creez aplicația principală Spring Boot
echo Creez aplicația principală Spring Boot...
(
echo package ro.ctp.grm;
echo.
echo import org.springframework.boot.SpringApplication;
echo import org.springframework.boot.autoconfigure.SpringBootApplication;
echo import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
echo.
echo @SpringBootApplication
echo @EnableJpaAuditing
echo public class GrmApplication {
echo.
echo     public static void main(String[] args^) {
echo         SpringApplication.run(GrmApplication.class, args^);
echo     }
echo.
echo }
) > backend\src\main\java\ro\ctp\grm\GrmApplication.java

echo ✓ GrmApplication.java creat!

REM Creez application.yml
echo Creez application.yml...
(
echo spring:
echo   application:
echo     name: grm-backend
echo   
echo   profiles:
echo     active: ${SPRING_PROFILES_ACTIVE:development}
echo   
echo   datasource:
echo     url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:grm_db}
echo     username: ${DB_USERNAME:grm_user}
echo     password: ${DB_PASSWORD:grm_password}
echo     driver-class-name: org.postgresql.Driver
echo   
echo   jpa:
echo     hibernate:
echo       ddl-auto: validate
echo     show-sql: false
echo     properties:
echo       hibernate:
echo         dialect: org.hibernate.dialect.PostgreSQLDialect
echo         format_sql: true
echo   
echo   flyway:
echo     enabled: true
echo     locations: classpath:db/migration
echo     baseline-on-migrate: true
echo.
echo # JWT Configuration
echo jwt:
echo   secret: ${JWT_SECRET:grm-super-secret-jwt-key-2025-change-in-production}
echo   expiration: ${JWT_EXPIRATION:86400}
echo.
echo # Application Configuration
echo app:
echo   upload:
echo     dir: ${UPLOAD_DIR:./uploads}
echo   frontend:
echo     url: ${FRONTEND_URL:http://localhost:3000}
echo.
echo # Management endpoints
echo management:
echo   endpoints:
echo     web:
echo       exposure:
echo         include: health,info,metrics
echo   endpoint:
echo     health:
echo       show-details: when-authorized
echo.
echo # Logging
echo logging:
echo   level:
echo     root: INFO
echo     ro.ctp.grm: DEBUG
echo   file:
echo     name: ${LOG_FILE:logs/grm.log}
echo.
echo # OpenAPI/Swagger
echo springdoc:
echo   api-docs:
echo     path: /api-docs
echo   swagger-ui:
echo     path: /swagger-ui.html
echo   info:
echo     title: GRM 2.0 API
echo     description: API pentru sistemul de management al resurselor - GRM 2.0
echo     version: 1.0.0
echo     contact:
echo       name: Mihaela Gavrila
echo       email: mihaela.gavrila@student.tuiasi.ro
) > backend\src\main\resources\application.yml

echo ✓ application.yml creat!

REM Creez frontend/package.json
echo Creez frontend/package.json...
(
echo {
echo   "name": "grm-frontend",
echo   "version": "1.0.0",
echo   "description": "GRM 2.0 Frontend Application",
echo   "private": true,
echo   "dependencies": {
echo     "@emotion/react": "^11.11.1",
echo     "@emotion/styled": "^11.11.0",
echo     "@fullcalendar/core": "^6.1.9",
echo     "@fullcalendar/daygrid": "^6.1.9",
echo     "@fullcalendar/interaction": "^6.1.9",
echo     "@fullcalendar/react": "^6.1.9",
echo     "@fullcalendar/timegrid": "^6.1.9",
echo     "@mui/icons-material": "^5.14.16",
echo     "@mui/material": "^5.14.17",
echo     "@mui/x-data-grid": "^6.18.1",
echo     "@reduxjs/toolkit": "^1.9.7",
echo     "@testing-library/jest-dom": "^5.17.0",
echo     "@testing-library/react": "^13.4.0",
echo     "@testing-library/user-event": "^13.5.0",
echo     "@types/jest": "^27.5.2",
echo     "@types/node": "^16.18.61",
echo     "@types/react": "^18.2.37",
echo     "@types/react-dom": "^18.2.15",
echo     "axios": "^1.6.0",
echo     "react": "^18.2.0",
echo     "react-dom": "^18.2.0",
echo     "react-redux": "^8.1.3",
echo     "react-router-dom": "^6.18.0",
echo     "react-scripts": "5.0.1",
echo     "react-toastify": "^9.1.3",
echo     "recharts": "^2.8.0",
echo     "typescript": "^4.9.5",
echo     "web-vitals": "^2.1.4"
echo   },
echo   "scripts": {
echo     "start": "react-scripts start",
echo     "build": "react-scripts build",
echo     "test": "react-scripts test",
echo     "eject": "react-scripts eject"
echo   },
echo   "eslintConfig": {
echo     "extends": [
echo       "react-app",
echo       "react-app/jest"
echo     ]
echo   },
echo   "browserslist": {
echo     "production": [
echo       "^>0.2%%",
echo       "not dead",
echo       "not op_mini all"
echo     ],
echo     "development": [
echo       "last 1 chrome version",
echo       "last 1 firefox version",
echo       "last 1 safari version"
echo     ]
echo   },
echo   "homepage": ".",
echo   "proxy": "http://localhost:8080"
echo }
) > frontend\package.json

echo ✓ frontend/package.json creat!

REM Creez frontend/public/index.html
echo Creez frontend/public/index.html...
(
echo ^<!DOCTYPE html^>
echo ^<html lang="ro"^>
echo   ^<head^>
echo     ^<meta charset="utf-8" /^>
echo     ^<link rel="icon" href="%%PUBLIC_URL%%/favicon.ico" /^>
echo     ^<meta name="viewport" content="width=device-width, initial-scale=1" /^>
echo     ^<meta name="theme-color" content="#000000" /^>
echo     ^<meta name="description" content="GRM 2.0 - Sistem ERP pentru gestionarea resurselor" /^>
echo     ^<title^>GRM 2.0 - Management Resurse^</title^>
echo   ^</head^>
echo   ^<body^>
echo     ^<noscript^>You need to enable JavaScript to run this app.^</noscript^>
echo     ^<div id="root"^>^</div^>
echo   ^</body^>
echo ^</html^>
) > frontend\public\index.html

echo ✓ frontend/public/index.html creat!

REM Creez aplicația React principală
echo Creez aplicația React principală...
(
echo import React from 'react';
echo import { BrowserRouter as Router } from 'react-router-dom';
echo import { ThemeProvider, CssBaseline } from '@mui/material';
echo import { createTheme } from '@mui/material/styles';
echo.
echo const theme = createTheme({
echo   palette: {
echo     primary: {
echo       main: '#1976d2',
echo     },
echo     secondary: {
echo       main: '#dc004e',
echo     },
echo   },
echo });
echo.
echo function App(^) {
echo   return (
echo     ^<ThemeProvider theme={theme}^>
echo       ^<CssBaseline /^>
echo       ^<Router^>
echo         ^<div className="App"^>
echo           ^<header className="App-header"^>
echo             ^<h1^>GRM 2.0 - Sistem ERP^</h1^>
echo             ^<p^>Sistem de Management al Resurselor^</p^>
echo             ^<p^>Backend: Spring Boot + PostgreSQL^</p^>
echo             ^<p^>Frontend: React + TypeScript + Material-UI^</p^>
echo             ^<p^>🚀 Aplicația este gata să ruleze!^</p^>
echo           ^</header^>
echo         ^</div^>
echo       ^</Router^>
echo     ^</ThemeProvider^>
echo   );
echo }
echo.
echo export default App;
) > frontend\src\App.tsx

echo ✓ frontend/src/App.tsx creat!

REM Creez index.tsx
echo Creez frontend/src/index.tsx...
(
echo import React from 'react';
echo import ReactDOM from 'react-dom/client';
echo import './index.css';
echo import App from './App';
echo.
echo const root = ReactDOM.createRoot(
echo   document.getElementById('root'^) as HTMLElement
echo );
echo root.render(
echo   ^<React.StrictMode^>
echo     ^<App /^>
echo   ^</React.StrictMode^>
echo );
) > frontend\src\index.tsx

echo ✓ frontend/src/index.tsx creat!

REM Creez CSS-ul de bază
echo Creez frontend/src/index.css...
(
echo body {
echo   margin: 0;
echo   font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
echo     'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
echo     sans-serif;
echo   -webkit-font-smoothing: antialiased;
echo   -moz-osx-font-smoothing: grayscale;
echo }
echo.
echo code {
echo   font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
echo     monospace;
echo }
echo.
echo .App {
echo   text-align: center;
echo }
echo.
echo .App-header {
echo   background-color: #282c34;
echo   padding: 20px;
echo   color: white;
echo   min-height: 100vh;
echo   display: flex;
echo   flex-direction: column;
echo   align-items: center;
echo   justify-content: center;
echo   font-size: calc(10px + 2vmin^);
echo }
) > frontend\src\index.css

echo ✓ frontend/src/index.css creat!

REM Creez tsconfig.json
echo Creez frontend/tsconfig.json...
(
echo {
echo   "compilerOptions": {
echo     "target": "es5",
echo     "lib": [
echo       "dom",
echo       "dom.iterable",
echo       "es6"
echo     ],
echo     "allowJs": true,
echo     "skipLibCheck": true,
echo     "esModuleInterop": true,
echo     "allowSyntheticDefaultImports": true,
echo     "strict": true,
echo     "forceConsistentCasingInFileNames": true,
echo     "noFallthroughCasesInSwitch": true,
echo     "module": "esnext",
echo     "moduleResolution": "node",
echo     "resolveJsonModule": true,
echo     "isolatedModules": true,
echo     "noEmit": true,
echo     "jsx": "react-jsx"
echo   },
echo   "include": [
echo     "src"
echo   ]
echo }
) > frontend\tsconfig.json

echo ✓ frontend/tsconfig.json creat!

REM Creez script pentru inițializare bază de date
echo Creez scripts/init-db.sql...
(
echo -- Initialize database with extensions
echo CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
echo CREATE EXTENSION IF NOT EXISTS "pg_trgm";
echo.
echo -- Create basic user table for testing
echo CREATE TABLE IF NOT EXISTS users (
echo     id BIGSERIAL PRIMARY KEY,
echo     username VARCHAR(50^) NOT NULL UNIQUE,
echo     email VARCHAR(100^) NOT NULL UNIQUE,
echo     password VARCHAR(255^) NOT NULL,
echo     first_name VARCHAR(100^) NOT NULL,
echo     last_name VARCHAR(100^) NOT NULL,
echo     is_active BOOLEAN NOT NULL DEFAULT true,
echo     created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
echo     updated_at TIMESTAMP
echo );
echo.
echo -- Insert admin user (password: Admin123!^)
echo INSERT INTO users (username, email, password, first_name, last_name^) 
echo VALUES (
echo     'admin', 
echo     'admin@grm.ro', 
echo     '$2a$10$rM8jBgI5vKjdVsKnZdKqJeC1qGZzG2QdQrHYvBcKVWL2FHg8qJwfO', 
echo     'Administrator', 
echo     'Sistem'
echo ^) ON CONFLICT (username^) DO NOTHING;
echo.
echo -- Create function for updating timestamps
echo CREATE OR REPLACE FUNCTION update_updated_at_column(^)
echo RETURNS TRIGGER AS $$
echo BEGIN
echo     NEW.updated_at = CURRENT_TIMESTAMP;
echo     RETURN NEW;
echo END;
echo $$ language 'plpgsql';
) > scripts\init-db.sql

echo ✓ scripts/init-db.sql creat!

REM Creez Dockerfile pentru backend
echo Creez backend/Dockerfile...
(
echo FROM openjdk:17-jre-slim
echo.
echo LABEL maintainer="mihaela.gavrila@student.tuiasi.ro"
echo LABEL description="GRM 2.0 Backend Application"
echo.
echo WORKDIR /app
echo.
echo # Install curl for health checks
echo RUN apt-get update ^&^& apt-get install -y curl ^&^& rm -rf /var/lib/apt/lists/*
echo.
echo # Copy Maven build artifact
echo COPY target/grm-backend-*.jar app.jar
echo.
echo # Create directories
echo RUN mkdir -p /app/uploads /app/logs
echo.
echo EXPOSE 8080
echo.
echo # Health check
echo HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
echo     CMD curl -f http://localhost:8080/actuator/health ^|^| exit 1
echo.
echo ENTRYPOINT ["java", "-jar", "app.jar"]
) > backend\Dockerfile

echo ✓ backend/Dockerfile creat!

REM Creez Dockerfile pentru frontend
echo Creez frontend/Dockerfile...
(
echo FROM node:18-alpine AS build
echo.
echo WORKDIR /app
echo.
echo # Copy package files
echo COPY package*.json ./
echo.
echo # Install dependencies
echo RUN npm ci --only=production
echo.
echo # Copy source code
echo COPY . .
echo.
echo # Build the app
echo ARG REACT_APP_API_URL=http://localhost:8080/api
echo ENV REACT_APP_API_URL=$REACT_APP_API_URL
echo.
echo RUN npm run build
echo.
echo # Production stage with Nginx
echo FROM nginx:alpine
echo.
echo LABEL maintainer="mihaela.gavrila@student.tuiasi.ro"
echo LABEL description="GRM 2.0 Frontend Application"
echo.
echo # Copy built app
echo COPY --from=build /app/build /usr/share/nginx/html
echo.
echo # Copy nginx configuration
echo COPY nginx.conf /etc/nginx/conf.d/default.conf
echo.
echo EXPOSE 80
echo.
echo CMD ["nginx", "-g", "daemon off;"]
) > frontend\Dockerfile

echo ✓ frontend/Dockerfile creat!

REM Creez nginx.conf pentru frontend
echo Creez frontend/nginx.conf...
(
echo server {
echo     listen 80;
echo     server_name localhost;
echo     
echo     root /usr/share/nginx/html;
echo     index index.html index.htm;
echo     
echo     # Handle client routing - send all requests to index.html
echo     location / {
echo         try_files $uri $uri/ /index.html;
echo     }
echo     
echo     # API proxy to backend
echo     location /api {
echo         proxy_pass http://backend:8080;
echo         proxy_set_header Host $host;
echo         proxy_set_header X-Real-IP $remote_addr;
echo         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
echo         proxy_set_header X-Forwarded-Proto $scheme;
echo     }
echo     
echo     # Error pages
echo     error_page 404 /index.html;
echo }
) > frontend\nginx.conf

echo ✓ frontend/nginx.conf creat!

echo.
echo ========================================
echo     ✅ TOATE FIȘIERELE AU FOST CREATE!
echo ========================================
echo.
echo 📁 Structura creată:
echo    - README.md, .gitignore, .env.example, LICENSE
echo    - docker-compose.yml, docker-compose.dev.yml
echo    - backend/ (Spring Boot cu pom.xml, aplicația principală^)
echo    - frontend/ (React cu package.json, App.tsx^)
echo    - scripts/ (init-db.sql pentru PostgreSQL^)
echo    - Dockerfile-uri pentru backend și frontend
echo.
echo 🚀 URMĂTORII PAȘI:
echo.
echo 1. COMMIT în GitHub Desktop:
echo    - Summary: "feat: Add complete GRM 2.0 system structure"
echo    - Description: "✅ Backend Spring Boot setup"
echo                  "✅ Frontend React setup" 
echo                  "✅ Docker configuration"
echo                  "✅ Database initialization"
echo.
echo 2. TESTARE:
echo    cd în folderul proiectului și rulează:
echo    docker-compose -f docker-compose.dev.yml up -d
echo.
echo 3. ACCESARE:
echo    - Database: localhost:5432 (user: grm_user, pass: grm_password^)
echo    - Pentru development:
echo      Backend: cd backend ^&^& mvn spring-boot:run (port 8080^)
echo      Frontend: cd frontend ^&^& npm install ^&^& npm start (port 3000^)
echo.
echo ========================================
echo        🎉 SISTEMUL ESTE GATA!
echo ========================================

pause